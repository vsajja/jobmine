/**
 * This class is generated by jOOQ
 */
package jooq.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.StudentRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Student extends TableImpl<StudentRecord> {

	private static final long serialVersionUID = 75670561;

	/**
	 * The reference instance of <code>public.student</code>
	 */
	public static final Student STUDENT = new Student();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<StudentRecord> getRecordType() {
		return StudentRecord.class;
	}

	/**
	 * The column <code>public.student.name</code>.
	 */
	public final TableField<StudentRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.phonenumber</code>.
	 */
	public final TableField<StudentRecord, String> PHONENUMBER = createField("phonenumber", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.email</code>.
	 */
	public final TableField<StudentRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.datejoined</code>.
	 */
	public final TableField<StudentRecord, Date> DATEJOINED = createField("datejoined", org.jooq.impl.SQLDataType.DATE, this, "");

	/**
	 * The column <code>public.student.streetaddress</code>.
	 */
	public final TableField<StudentRecord, String> STREETADDRESS = createField("streetaddress", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.city</code>.
	 */
	public final TableField<StudentRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.region</code>.
	 */
	public final TableField<StudentRecord, String> REGION = createField("region", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.country</code>.
	 */
	public final TableField<StudentRecord, String> COUNTRY = createField("country", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.postalorzip</code>.
	 */
	public final TableField<StudentRecord, String> POSTALORZIP = createField("postalorzip", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.description</code>.
	 */
	public final TableField<StudentRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.student.age</code>.
	 */
	public final TableField<StudentRecord, Integer> AGE = createField("age", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.student.student_id</code>.
	 */
	public final TableField<StudentRecord, Integer> STUDENT_ID = createField("student_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * Create a <code>public.student</code> table reference
	 */
	public Student() {
		this("student", null);
	}

	/**
	 * Create an aliased <code>public.student</code> table reference
	 */
	public Student(String alias) {
		this(alias, STUDENT);
	}

	private Student(String alias, Table<StudentRecord> aliased) {
		this(alias, aliased, null);
	}

	private Student(String alias, Table<StudentRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<StudentRecord, Integer> getIdentity() {
		return Keys.IDENTITY_STUDENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<StudentRecord> getPrimaryKey() {
		return Keys.STUDENT_ID_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<StudentRecord>> getKeys() {
		return Arrays.<UniqueKey<StudentRecord>>asList(Keys.STUDENT_ID_PK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Student as(String alias) {
		return new Student(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Student rename(String name) {
		return new Student(name, null);
	}
}
